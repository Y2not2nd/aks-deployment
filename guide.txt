# Guide for Setting Up Static Web Application with Vault Integration

## Prerequisites
- Kubernetes cluster running
- Helm installed
- Vault installed in the cluster
- kubectl configured to access your cluster

## 1. Setting up Vault Policy
This step is required to allow your application to access secrets in Vault.

### Create the Vault Policy
1. Create a policy file (static-web-policy.hcl):
```hcl
path "kv/data/static-web-secrets" {
  capabilities = ["read"]
}
```

2. Apply the policy using one of these methods:

Method A - Using script (Recommended for Windows):
```bash
# Create a script file named create-policy.sh
cat > create-policy.sh << 'EOF'
#!/bin/bash
kubectl exec -i vault-0 -- sh -c 'cat > /tmp/policy.hcl << EOF2
path "kv/data/static-web-secrets" {
  capabilities = ["read"]
}
EOF2
vault policy write static-web-policy /tmp/policy.hcl'
EOF

# Make it executable and run
chmod +x create-policy.sh
./create-policy.sh
```

Method B - Direct approach (Linux/Mac):
```bash
kubectl cp vault-policies/static-web-policy.hcl vault-0:/tmp/static-web-policy.hcl
kubectl exec -it vault-0 -- vault policy write static-web-policy /tmp/static-web-policy.hcl
```

### Verify Policy Creation
```bash
kubectl exec -it vault-0 -- vault policy read static-web-policy
```

## 2. Configure Kubernetes Authentication
```bash
# Enable kubernetes auth if not already enabled
kubectl exec -it vault-0 -- vault auth enable kubernetes

# Configure Kubernetes auth
kubectl exec -it vault-0 -- vault write auth/kubernetes/config \
    kubernetes_host="https://$KUBERNETES_PORT_443_TCP_ADDR:443" \
    token_reviewer_jwt="$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
    kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
    issuer="https://kubernetes.default.svc.cluster.local"
```

## 3. Create a Role for the Application
```bash
kubectl exec -it vault-0 -- vault write auth/kubernetes/role/static-web \
    bound_service_account_names=static-web \
    bound_service_account_namespaces=default \
    policies=static-web-policy \
    ttl=1h
```

## 4. Store Secrets in Vault (if needed)
```bash
kubectl exec -it vault-0 -- vault kv put kv/static-web-secrets \
    api_key="your-api-key" \
    db_password="your-db-password"
```

## 5. Deploy the Application
Follow the steps in the deployment guide to deploy your application with Vault integration.

Important Notes:
- Always use the script method (Method A) when working on Windows to avoid path issues
- The policy grants only read access to specific secrets path
- Make sure to replace placeholder values with your actual configuration
- Keep your policy files and scripts in version control
- Remember to handle secrets securely and never commit them to version control

## Next Steps
1. Set up monitoring for Vault access
2. Configure secret rotation if needed
3. Set up backup procedures for Vault
4. Document any custom configurations

## Troubleshooting
If you encounter path-related issues:
- Use the script method provided
- Ensure you're using forward slashes in paths
- Create files directly in the container instead of copying from host
- Check container logs for detailed error messages

## Security Considerations
- Follow the principle of least privilege when creating policies
- Regularly audit policy assignments
- Use short-lived tokens
- Monitor policy usage and access patterns 